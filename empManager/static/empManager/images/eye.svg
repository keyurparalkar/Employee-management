<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye" viewBox="0 0 16 16"><script xmlns="">
		(function() {
			const contentScriptEventTrigger = function(data) {
				window.postMessage({ id:'adobeExperienceCloudDebuggerContentMessagingIdentifier-1', data: data });
			}
			const DATA_LAYER_LOCAL_STORAGE_KEY = 'com.adobe.experiencePlatformDebugger.dataLayer.key';
const dataLayerKey = window.localStorage.getItem(DATA_LAYER_LOCAL_STORAGE_KEY);

if (dataLayerKey) {
	// sindresorhus/on-change
	// MIT - License
	// https://github.com/sindresorhus/on-change
	const PATH_SEPARATOR = '.';
	const TARGET = Symbol('target');
	const UNSUBSCRIBE = Symbol('unsubscribe');

	const isPrimitive = value =&gt;
		value === null || (typeof value !== 'object' &amp;&amp; typeof value !== 'function');

	const isBuiltinWithoutMutableMethods = value =&gt;
		value instanceof RegExp || value instanceof Number;

	const isBuiltinWithMutableMethods = value =&gt; value instanceof Date;

	const concatPath = (path, property) =&gt; {
		if (property &amp;&amp; property.toString) {
			if (path) {
				path += PATH_SEPARATOR;
			}

			path += property.toString();
		}

		return path;
	};

	const walkPath = (path, callback) =&gt; {
		let index;

		while (path) {
			index = path.indexOf(PATH_SEPARATOR);

			if (index === -1) {
				index = path.length;
			}

			callback(path.slice(0, index));

			path = path.slice(index + 1);
		}
	};

	const shallowClone = value =&gt; {
		if (Array.isArray(value)) {
			return value.slice();
		}

		return Object.assign({}, value);
	};

	const onChange = (object, onChange, options = {}) =&gt; {
		const proxyTarget = Symbol('ProxyTarget');
		let inApply = false;
		let changed = false;
		let applyPath;
		let applyPrevious;
		let isUnsubscribed = false;
		const equals = options.equals || Object.is;
		let propCache = new WeakMap();
		let pathCache = new WeakMap();
		let proxyCache = new WeakMap();

		const handleChange = (path, property, previous, value) =&gt; {
			if (isUnsubscribed) {
				return;
			}

			if (!inApply) {
				onChange(concatPath(path, property), value, previous);
				return;
			}

			if (
				inApply &amp;&amp;
				applyPrevious &amp;&amp;
				previous !== undefined &amp;&amp;
				value !== undefined &amp;&amp;
				property !== 'length'
			) {
				let item = applyPrevious;

				if (path !== applyPath) {
					path = path.replace(applyPath, '').slice(1);

					walkPath(path, key =&gt; {
						item[key] = shallowClone(item[key]);
						item = item[key];
					});
				}

				item[property] = previous;
			}

			changed = true;
		};

		const getOwnPropertyDescriptor = (target, property) =&gt; {
			let props = propCache ? propCache.get(target) : undefined;

			if (props) {
				return props;
			}

			props = new Map();
			propCache.set(target, props);

			let prop = props.get(property);
			if (!prop) {
				prop = Reflect.getOwnPropertyDescriptor(target, property);
				props.set(property, prop);
			}

			return prop;
		};

		const invalidateCachedDescriptor = (target, property) =&gt; {
			const props = propCache ? propCache.get(target) : undefined;

			if (props) {
				props.delete(property);
			}
		};

		const buildProxy = (value, path) =&gt; {
			if (isUnsubscribed) {
				return value;
			}

			pathCache.set(value, path);

			let proxy = proxyCache.get(value);

			if (proxy === undefined) {
				proxy = new Proxy(value, handler);
				proxyCache.set(value, proxy);
			}

			return proxy;
		};

		const unsubscribe = target =&gt; {
			isUnsubscribed = true;
			propCache = null;
			pathCache = null;
			proxyCache = null;

			return target;
		};

		const ignoreChange = property =&gt; {
			return isUnsubscribed || (options.ignoreSymbols === true &amp;&amp; typeof property === 'symbol');
		};

		const handler = {
			get(target, property, receiver) {
				if (property === proxyTarget || property === TARGET) {
					return target;
				}

				if (property === UNSUBSCRIBE &amp;&amp; pathCache.get(target) === '') {
					return unsubscribe(target);
				}

				const value = Reflect.get(target, property, receiver);
				if (
					isPrimitive(value) ||
					isBuiltinWithoutMutableMethods(value) ||
					property === 'constructor' ||
					options.isShallow === true
				) {
					return value;
				}

				// Preserve invariants
				const descriptor = getOwnPropertyDescriptor(target, property);
				if (descriptor &amp;&amp; !descriptor.configurable) {
					if (descriptor.set &amp;&amp; !descriptor.get) {
						return undefined;
					}

					if (descriptor.writable === false) {
						return value;
					}
				}

				return buildProxy(value, concatPath(pathCache.get(target), property));
			},

			set(target, property, value, receiver) {
				if (value &amp;&amp; value[proxyTarget] !== undefined) {
					value = value[proxyTarget];
				}

				const ignore = ignoreChange(property);
				const previous = ignore ? null : Reflect.get(target, property, receiver);
				const result = Reflect.set(target[proxyTarget] || target, property, value);

				if (!ignore &amp;&amp; !equals(previous, value)) {
					handleChange(pathCache.get(target), property, previous, value);
				}

				return result;
			},

			defineProperty(target, property, descriptor) {
				const result = Reflect.defineProperty(target, property, descriptor);

				if (!ignoreChange(property)) {
					invalidateCachedDescriptor(target, property);

					handleChange(pathCache.get(target), property, undefined, descriptor.value);
				}

				return result;
			},

			deleteProperty(target, property) {
				if (!Reflect.has(target, property)) {
					return true;
				}

				const ignore = ignoreChange(property);
				const previous = ignore ? null : Reflect.get(target, property);
				const result = Reflect.deleteProperty(target, property);

				if (!ignore) {
					invalidateCachedDescriptor(target, property);

					handleChange(pathCache.get(target), property, previous);
				}

				return result;
			},

			apply(target, thisArg, argumentsList) {
				const compare = isBuiltinWithMutableMethods(thisArg);

				if (compare) {
					thisArg = thisArg[proxyTarget];
				}

				if (!inApply) {
					inApply = true;

					if (compare) {
						applyPrevious = thisArg.valueOf();
					}

					if (Array.isArray(thisArg) || toString.call(thisArg) === '[object Object]') {
						applyPrevious = shallowClone(thisArg[proxyTarget]);
					}

					applyPath = pathCache.get(target);
					applyPath = applyPath.slice(0, Math.max(applyPath.lastIndexOf(PATH_SEPARATOR), 0));

					const result = Reflect.apply(target, thisArg, argumentsList);

					inApply = false;

					if (changed || (compare &amp;&amp; !equals(applyPrevious, thisArg.valueOf()))) {
						handleChange(applyPath, '', applyPrevious, thisArg[proxyTarget] || thisArg);
						applyPrevious = null;
						changed = false;
					}

					return result;
				}

				return Reflect.apply(target, thisArg, argumentsList);
			}
		};

		const proxy = buildProxy(object, '');
		onChange = onChange.bind(proxy);

		return proxy;
	};

	onChange.target = proxy =&gt; proxy[TARGET] || proxy;
	onChange.unsubscribe = proxy =&gt; proxy[UNSUBSCRIBE] || proxy;

	let proxy;
	let previousDataLayer;

	function _serialize(dataLayer) {
		try {
			return JSON.stringify({ ...dataLayer }, null, 2);
		} catch (e) {
			return JSON.stringify(dataLayer, null, 2);
		}
	}

	function _notify(dataLayer) {
		contentScriptEventTrigger({
			data: {
				dataLayer
			},
			timestamp: Date.now(),
			timeSincePageLoad: window.performance.now()
		});
	}

	function onDataLayerUpdate() {
		const dataLayer = _serialize(this);

		if (previousDataLayer !== dataLayer) {
			previousDataLayer = dataLayer;
			_notify(dataLayer);
		}
	}

	function onDataLayerSet(newDataLayer) {
		const dataLayer = _serialize(newDataLayer);
		if (!previousDataLayer || previousDataLayer !== dataLayer) {
			previousDataLayer = dataLayer;
			_notify(dataLayer);
		}
	}

	Object.defineProperty(window, dataLayerKey, {
		get() {
			return proxy;
		},
		set(newDataLayer) {
			onDataLayerSet(newDataLayer);
			proxy = onChange(newDataLayer, onDataLayerUpdate);
		},
		enumerable: true,
		configurable: true
	});

	const oldObjectDefine = Object.defineProperty.bind(Object);
	Object.defineProperty = function(obj, prop, descriptor) {
		if (prop === dataLayerKey) {
			console.debug(
				'Data layer being overwritten by Object.defineProperty(). Falling back to polling...'
			);

			function pollForChanges() {
				const dataLayer = _serialize(window[dataLayerKey]);
				if (previousDataLayer !== dataLayer) {
					previousDataLayer = dataLayer;
					_notify(dataLayer);
				}
				window.requestAnimationFrame(pollForChanges);
			}

			window.requestAnimationFrame(pollForChanges);
		}
		return oldObjectDefine(obj, prop, descriptor);
	};
}
 
		})();
	</script><script xmlns="">
		(function() {
			const contentScriptEventTrigger = function(data) {
				window.postMessage({ id:'adobeExperienceCloudDebuggerContentMessagingIdentifier-2', data: data });
			}
			/**
 * Hooks into both DTM's and Launch's logging mechanisms in order to capture all log messages and
 * send them to the UI to display to the user
 */
function notifyContentScript(log) {
	contentScriptEventTrigger({
		data: log,
		timestamp: Date.now(),
		timeSincePageLoad: window.performance.now()
	});
}

window._satellite = window._satellite || {
	notify: function() {
		// TODO: if we have sdsat_debug set to true, then console log
	},
	track: function() {
		// TODO: implement notifications
	},
	getVar: function() {
		// TODO: implement notifications
	},
	setVar: function() {
		// TODO: implement notifications
	},
	getVisitorId: function() {
		// TODO: implement notifications
		return null;
	},
	setCookie: function() {
		// TODO: implement cookie setting
	},
	readCookie: function() {
		// TODO: implement cookie reading
	},
	removeCookie: function() {
		// TODO: implement cookie deletion
	},
	isLinked: function() {
		// TODO: figure out what this is
	},
	pageBottom: function() {
		// TODO: implement notifications
	}
};

window._satellite.override = window._satellite.override || {};

onSatelliteInit = function() {
	let _satellite = window._satellite;
	if (_satellite.Logger) {
		_satellite.Logger.keepLimit = 9999;
	}

	// override notify
	// Reason: we want to intercept messages that go through here
	// without worrying about limits or messing anything up internally
	let originalNotify = _satellite.notify;
	_satellite.notify = function(message, level) {
		const logLevel = ['log', 'log', 'log', 'info', 'warn', 'error'];

		// call original
		originalNotify(message, level);

		const log = {
			solution: 'dtm',
			solutions: ['dtm'],
			level: logLevel[level] || 'log',
			message: ''
		};

		// make sure that we have a message
		if (message &amp;&amp; typeof message === 'string') {
			// only add it
			log.message = message;

			// check to see what solution it came from
			if (message.indexOf('Adobe Analytics:') !== -1) {
				log.solutions.push('analytics');
			} else if (message.indexOf('Test &amp; Target:') !== -1) {
				log.solutions.push('target');
			} else if (message.indexOf('Visitor ID:') !== -1) {
				log.solutions.push('visitorService');
			} else if (message.indexOf('AdLens:') !== -1) {
				log.solutions.push('mediaOptimizer');
			}
		}
		notifyContentScript(log);
	};
};

function _overrideConsoleLogFunction(prefix, solution, level) {
	const originalFunction = console[level];
	const previousMessages = [];
	console[level] = function() {
		const argsAsArray = Array.prototype.slice.call(arguments);
		originalFunction.apply(console, argsAsArray);
		const mappedArgs = argsAsArray.map(arg =&gt; {
			let result = '';
			if (arg &amp;&amp; typeof arg.toString === 'function') {
				result = arg.toString();
			}
			if (!result || result === '[object Object]') {
				try {
					result = JSON.stringify(arg);
				} catch (e) {
					return '';
				}
			}
			return result;
		});

		const message = mappedArgs.join(' ');

		if (typeof message === 'string') {
			if (message.indexOf(prefix) === 0) {
				const log = {
					solution: solution,
					solutions: [solution],
					level: level,
					message: message,
					searchIndex: message,
					params: mappedArgs
				};

				// check to see what solution it came from
				if (message.indexOf('[Adobe Analytics]') !== -1) {
					log.solutions.push('analytics');
				} else if (message.indexOf('[Adobe Target]') !== -1) {
					log.solutions.push('target');
				} else if (message.indexOf('[Experience Cloud ID Service]') !== -1) {
					log.solutions.push('visitorService');
				} else if (message.indexOf('[Adobe Media Optimizer]') !== -1) {
					log.solutions.push('mediaOptimizer');
				}
				previousMessages.unshift(message);
				if (previousMessages.length &gt;= 10) {
					previousMessages.pop();
					if (previousMessages.every(m =&gt; m === message)) {
						// We've caught the same message 10 times in a row. We're probably in a loop of some kind...
						// Just bail out and don't send it up to the debugger UI
						return;
					}
				}
				notifyContentScript(log);
			}
		}
	};
}

/**
 * Overrides the various console.* methods in order to intercept messages that
 * are sent to the console by launch. A message was sent be launch if it starts
 * with the rocket emoji 🚀. Note that this is a somewhat brittle solution
 * since if the emoji ever changes this integration will break. However this
 * is the only solution that works for now.
 *
 * Any messages that are not prefixed with the rocket emoji are ignored and passed
 * through to the original console function
 */
function _overrideConsoleForLaunch() {
	const prefix = '\uD83D\uDE80';
	['error', 'info', 'log', 'warn'].forEach(
		_overrideConsoleLogFunction.bind(null, prefix, 'launch')
	);
}

/**
 * Intercepts console messages made by alloy (prefixed with [alloy]) and notifies content script about each one.
 * Note that this is a brittle solution and should not be used long term.
 *
 * Ideally there will be some debugging hooks built into alloy itself that we can connect to
 */
function _overrideConsoleForAlloy() {
	window.__alloyNS = [];
	const originalPush = window.__alloyNS.push;
	window.__alloyNS.push = function(namespace) {
		['error', 'info', 'log', 'warn'].forEach(
			_overrideConsoleLogFunction.bind(null, `[${namespace}]`, 'alloy')
		);

		originalPush.apply(window.__alloyNS, Array.prototype.slice.call(arguments));
	};
}

_overrideConsoleForLaunch();
_overrideConsoleForAlloy();

// find a good place to hook into _satellite object
if (window.Object &amp;&amp; window.Object.defineProperty) {
	// DTM hook
	window.Object.defineProperty(
		window._satellite.override,
		'adobe.experienceCloud.debuggerDTMInitHook',
		{
			enumerable: true,
			get: function() {
				onSatelliteInit();
				return '';
			},
			set: function() {}
		}
	);
}

// Once the page has finished loading, remove _satellite if both DTM and Launch were not found
window.addEventListener('load', function() {
	if (!_hasDtm() &amp;&amp; !_hasLaunch()) {
		delete window._satellite;
	}
});

/**
 * @returns {boolean} whether launch is present on the page
 */
function _hasLaunch() {
	return !!(window._satellite &amp;&amp; window._satellite._container);
}

/**
 * @returns {boolean} whether DTM is present on the page
 */
function _hasDtm() {
	return !!(window._satellite &amp;&amp; window._satellite.configurationSettings);
}
 
		})();
	</script><script xmlns="">
		(function() {
			const contentScriptEventTrigger = function(data) {
				window.postMessage({ id:'adobeExperienceCloudDebuggerContentMessagingIdentifier-3', data: data });
			}
			window.___target_traces = window.___target_traces || [];
var originalPush = window.___target_traces.push;

window.___target_traces.push = function(trace) {
	contentScriptEventTrigger({ trace });
	originalPush.call(this, trace);
};
 
		})();
	</script>
  <path fill-rule="evenodd" d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.134 13.134 0 0 0 1.66 2.043C4.12 11.332 5.88 12.5 8 12.5c2.12 0 3.879-1.168 5.168-2.457A13.134 13.134 0 0 0 14.828 8a13.133 13.133 0 0 0-1.66-2.043C11.879 4.668 10.119 3.5 8 3.5c-2.12 0-3.879 1.168-5.168 2.457A13.133 13.133 0 0 0 1.172 8z"/>
  <path fill-rule="evenodd" d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z"/>
</svg>